package game.settings;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;

/**
 * It initializes the view for Game Settings
 *
 * @author shareenali
 * @version 0.1
 */

public class SettingsView {
    private JPanel panelSettings;
    private JPanel panelTitle;
    private JLabel labelTitle;
    private JPanel panelContent;
    private JPanel panelNoPlayers;
    private JLabel labelNoPlayers;
    private JComboBox comboNoPlayers;
    private JPanel panelPlayers;
    private JPanel panelActions;
    private JButton buttonStart;

    private DefaultComboBoxModel<Integer> modelNoPlayers = new DefaultComboBoxModel<>();

    private SettingsModel model = SettingsModel.getInstance();

    /**
     * Initializes the default values in UI.
     */
    @SuppressWarnings("unchecked")
    void initializeValues() {
        this.modelNoPlayers.removeAllElements();

        for (int i = 2; i < 7; i++) {
            this.modelNoPlayers.addElement(i);
        }

        this.comboNoPlayers.setModel(this.modelNoPlayers);
        this.createPlayerInfoPanels();
    }

    /**
     * Binds the useful listeners to combo box of the number of players
     *
     * @param listener onItemSelected listener
     */
    void bindComboNoPlayersListeners(ActionListener listener) {
        this.comboNoPlayers.addActionListener(listener);
    }

    /**
     * Binds the useful listeners to start game button
     * @param listener onClick listener
     */
    void bindButtonStartListeners(ActionListener listener) {
        this.buttonStart.addActionListener(listener);
    }

    /**
     * It runs through all the UI components and collects the information
     */
    void collectData() {
        Component[] components = this.panelPlayers.getComponents();
        this.model.clearPlayers();

        for (Component component : components) {
            Component[] children = ((JPanel) component).getComponents();
            JTextField name = (JTextField) children[1];
            JComboBox type = (JComboBox) children[2];

            this.model.addPlayer(name.getText(), type.getSelectedIndex());
        }
    }

    /**
     * Creates a new panel of the player w.r.t number of players
     */
    @SuppressWarnings("unchecked")
    void createPlayerInfoPanels() {
        int noOfPlayers = this.modelNoPlayers.getElementAt(this.comboNoPlayers.getSelectedIndex());
        this.panelPlayers.removeAll();

        for (int i = 0; i < noOfPlayers; i++) {
            JPanel panelPlayer = new JPanel();
            panelPlayer.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
            JLabel labelName = new JLabel();
            labelName.setText("Name:");
            panelPlayer.add(labelName);
            JTextField textName = new JTextField();
            textName.setPreferredSize(new Dimension(164, 27));
            panelPlayer.add(textName);
            JComboBox comboType = new JComboBox();
            DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
            model.addElement("Human");
            model.addElement("Computer");
            comboType.setModel(model);
            panelPlayer.add(comboType);

            GridBagConstraints gbc = new GridBagConstraints();
            gbc.gridx = 0;
            gbc.gridy = i;
            gbc.fill = GridBagConstraints.BOTH;

            panelPlayers.add(panelPlayer, gbc);
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelSettings = new JPanel();
        panelSettings.setLayout(new BorderLayout(0, 0));
        panelTitle = new JPanel();
        panelTitle.setLayout(new GridBagLayout());
        panelSettings.add(panelTitle, BorderLayout.NORTH);
        labelTitle = new JLabel();
        Font labelTitleFont = this.$$$getFont$$$(null, -1, 16, labelTitle.getFont());
        if (labelTitleFont != null) labelTitle.setFont(labelTitleFont);
        labelTitle.setText("Game Settings");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.ipadx = 16;
        gbc.ipady = 16;
        panelTitle.add(labelTitle, gbc);
        panelContent = new JPanel();
        panelContent.setLayout(new BorderLayout(0, 0));
        panelSettings.add(panelContent, BorderLayout.CENTER);
        panelNoPlayers = new JPanel();
        panelNoPlayers.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        panelContent.add(panelNoPlayers, BorderLayout.NORTH);
        labelNoPlayers = new JLabel();
        labelNoPlayers.setText("Number of Players:");
        panelNoPlayers.add(labelNoPlayers);
        comboNoPlayers = new JComboBox();
        panelNoPlayers.add(comboNoPlayers);
        panelPlayers = new JPanel();
        panelPlayers.setLayout(new GridBagLayout());
        panelContent.add(panelPlayers, BorderLayout.CENTER);
        panelActions = new JPanel();
        panelActions.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        panelSettings.add(panelActions, BorderLayout.SOUTH);
        buttonStart = new JButton();
        buttonStart.setText("Start");
        panelActions.add(buttonStart);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelSettings;
    }
}
