package risk;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;

/**
 * The view component for the entry point in game.
 * @author shareenali
 * @version 0.1
 */

public class RiskView {
    private JPanel panel_risk;
    private JPanel panel_title;
    private JLabel label_title;
    private JPanel panel_content;
    private JButton button_new_game;

    /**
     * Binds the useful listeners to newGameButton
     * @param listener onClick listener
     */
    void bindNewGameListener(ActionListener listener) {
        this.button_new_game.addActionListener(listener);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel_risk = new JPanel();
        panel_risk.setLayout(new BorderLayout(0, 0));
        panel_title = new JPanel();
        panel_title.setLayout(new GridBagLayout());
        panel_risk.add(panel_title, BorderLayout.NORTH);
        label_title = new JLabel();
        Font label_titleFont = this.$$$getFont$$$("Ayuthaya", -1, 24, label_title.getFont());
        if (label_titleFont != null) label_title.setFont(label_titleFont);
        label_title.setText("Risk");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.ipadx = 10;
        gbc.ipady = 10;
        panel_title.add(label_title, gbc);
        panel_content = new JPanel();
        panel_content.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        panel_risk.add(panel_content, BorderLayout.CENTER);
        button_new_game = new JButton();
        button_new_game.setText("New Game");
        panel_content.add(button_new_game);
    }

    /**
     * It retrieves font from the system.
     * @param fontName name of the font to retrieve
     * @param style style identifier of the font
     * @param size size of the font
     * @param currentFont existing font attached to target component
     * @return returns desired font
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @return the top most panel
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel_risk;
    }
}
